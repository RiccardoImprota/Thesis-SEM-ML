---
title: "Reverse Variables"
format: html
---

## Loading Libraries

```{r}
# Tidyverse
library(dplyr)  # Data manipulation
library(purrr)  # Functional programming
library(readr)  # Data import

# Additional libraries used for this analysis
library(sjlabelled)  # Labeling data
library(psych)  # Psychometric analysis and data manipulation
source("functions.R")
library(corrplot)

```

# Reversing variables

To choose which variables to reverse we will use the manually prepared .csv
```{r}
df <- read_csv("../data/processed/df_numeric.csv", show_col_types = FALSE)
reversedf<-read_csv2("../data/var_to_reverse.csv", show_col_types = FALSE)
```
```{r}
# Using the syntax of the prepared .csv, we can setup an array of variables to reverse
vars_to_reverse <- as.character(na.omit(reversedf[reversedf$toreverse == 'y', ])$variables)
```

```{r}
# Define a function to reverse the scale of a numeric variable.
reverse_variable <- function(x) {
    max_val = max(x, na.rm = TRUE)
    min_val = min(x, na.rm = TRUE)
    return(max_val - x + min_val)
}

print(head(df$noise,15))

# Apply the reverse_variable function to specified columns in the dataframe.
df <- df %>% 
  mutate(across(all_of(vars_to_reverse), reverse_variable))

# Print the first 15 values of 'noise' column after the reversal for verification
print(head(df$noise,15))
```

```{r}

usedvar <- ImportUsedvar(M1=TRUE) %>% filter(variable != "employee_selfdeclared")
dimensionsdf<- usedvar %>% filter(!is.na(dimension)) %>% select(variable, dimension)
```

```{r}
#Saving the new dataframe where the correct variables are reversed
write_csv(df, "../data/processed//df_reversed.csv")
```

# Computing Cronbach's Alpha for EWCS-defined variables.

This was used to compute the Cronbach's Alpha for the dimensions that were defined according to the EWCS variables.

It must be noted that these are not the dimensions that were used for Machine learning due to their low reliability. EGA-defined factors were used instead.

Since we're interested in computing Cronbach's alpha, we're going to remove variables that are numeric or dichotomous.


```{r}
# Get the names of the columns where max value is either 2 or above 6
variables_to_remove <- names(df)[sapply(df, function(x) max(x, na.rm = TRUE) %in% 2 | max(x, na.rm = TRUE) > 6)]

# Keep only variables_to_remove_for_alpha that are present in the "variable" column of dimensionsdf
variables_to_remove <- variables_to_remove[variables_to_remove %in% dimensionsdf$variable]

# Remove those columns from df
df <- df %>% select(-variables_to_remove)
dimensionsdf <- dimensionsdf %>% filter(!variable %in% all_of(variables_to_remove))
```

```{r}
dimensionsdf$dimension %>% 
    unique() %>% 
    purrr::map_df(~list( dimension = .x,
    alpha = psych::alpha(df[, dimensionsdf$variable[dimensionsdf$dimension == .x]],check.keys = TRUE)$total[["std.alpha"]]
  ))
```

```{r}
### Complete alpha output for all dimensions

for (dim in unique(dimensionsdf$dimension)) {

  message <- paste("Dimension being considered:", dim)
  border <- strrep("*", nchar(message) + 4)
  cat(paste0("\n", border, "\n* ", message, " *\n", border, "\n"), sep = "")
  
  

  # Get the variables for the desired dimension
  dim_variables <- dimensionsdf$variable[dimensionsdf$dimension == dim]

  # Remove the excluded variables
  exclude_var <- c()
  dim_variables <- dim_variables[!dim_variables %in% exclude_var]
  
  
  # Compute the alpha coefficient
  print(psych::alpha(df[, dim_variables]))
  
  # Create the correlation matrix
  df_corr <- df[, dim_variables]
  corr_matrix <- cor(df_corr, use="pairwise.complete.obs")
  
  # Add extra margin at the top
  par(mar = c(4, 4, 2, 2) + 0.1)

  # Create the correlation plot
  corrplot(corr_matrix, method = "color", order = "hclust", 
         addCoef.col = "black", # Add correlation coefficient to the plot
         tl.col = "black", tl.srt = 45, # Text color and rotation
         title=dim, # Set the title
     mar=c(0,0,1,0) # http://stackoverflow.com/a/14754408/54964
)
}
```
