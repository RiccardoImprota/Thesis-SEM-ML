setwd("~/Codice/Uni/Thesis-SEM-ML")
# Tidyverse
getwd()
library(dplyr)  # Data manipulation
library(purrr)  # Functional programming
library(readr)  # Data import
# EGA
source("../DataPreparation/functions.R")
library(EGAnet)
library(sna)
df <-ImportReversedDF()
# Get the names of the columns where max value is either 2 or above 6
variables_to_remove <- names(df)[sapply(df, function(x) max(x, na.rm = TRUE) %in% 2 | max(x, na.rm = TRUE) > 6)]
df <- df %>% select(-variables_to_remove,-ID, -SurveyCombination_M1, -SurveyCombination_M2, -Country,-private_sector,-empl_contract,-eng_energy,-eng_enthusiastic,-eng_timeflies)
df <- df %>% select(-telework,-losejob,-undesirable_change,-predict_earnings)
preliminarybootdata <- bootEGA(
df,
iter= 1000,
seed = 42,
algorithm = 'louvain',
type = "resampling",
progress = FALSE,
)
# Tidyverse
getwd()
library(dplyr)  # Data manipulation
library(purrr)  # Functional programming
library(readr)  # Data import
# EGA
source("../DataPreparation/functions.R")
library(EGAnet)
library(sna)
df <-ImportReversedDF()
# Get the names of the columns where max value is either 2 or above 6
variables_to_remove <- names(df)[sapply(df, function(x) max(x, na.rm = TRUE) %in% 2 | max(x, na.rm = TRUE) > 6)]
df <- df %>% select(-variables_to_remove,-ID, -SurveyCombination_M1, -SurveyCombination_M2, -Country,-private_sector,-empl_contract,-eng_energy,-eng_enthusiastic,-eng_timeflies)
df <- df %>% select(-telework,-losejob,-undesirable_change,-predict_earnings)
preliminarybootdata <- bootEGA(
df,
iter= 1000,
seed = 42,
algorithm = 'louvain',
type = "resampling",
progress = FALSE,
)
preliminarybootdata$frequency
preliminaryIS <- itemStability(preliminarybootdata)
names_to_remove <- names(preliminaryIS$item.stability$empirical.dimensions)[preliminaryIS$item.stability$empirical.dimensions < 0.8]
df <- df %>%
select(-all_of(names_to_remove))
bootdata <- bootEGA(
df,
iter= 1000,
seed = 42,
algorithm = 'louvain',
type = "resampling",
progress = FALSE,
)
bootdata$frequency
IS <- itemStability(bootdata)
dfitemscluster <- tibble(
names = names(IS$membership$empirical),
values = IS$membership$empirical
)
# Import the CSV file
used_variables <- ImportUsedvar()  %>%
select(variable, question , dimension)
# Perform a join operation
dfitemscluster <- dfitemscluster %>%
left_join(used_variables, by = c("names" = "variable"))
write_csv(dfitemscluster, "../../data/processed/EGA_itemclusters.csv")
setwd("~/Codice/Uni/Thesis-SEM-ML")
# This code is not necessary to run any script.
# It is only used to compute the cronbach alpha of the EGA dimensions.
# load the necessary packages
library(lavaan)
library(readr)  # Data import
library(psych)
print(getwd())
source("../DataPreparation/functions.R")
setwd("~/Codice/Uni/Thesis-SEM-ML")
setwd("~/Codice/Uni/Thesis-SEM-ML/Source/Defining Dimensions")
# This code is not necessary to run any script.
# It is only used to compute the cronbach alpha of the EGA dimensions.
# load the necessary packages
library(lavaan)
library(readr)  # Data import
library(psych)
print(getwd())
source("../DataPreparation/functions.R")
df <-ImportReversedDF()
EGAdimensions <-read_csv2("../../data/EGAdimensions.csv", show_col_types = FALSE)
# Select the variables
df <- df %>%
select(all_of(EGAdimensions$names))
model_list <- list()
for(dimension in unique(EGAdimensions$EGA_dimension)){
factor_variables <- EGAdimensions$names[EGAdimensions$EGA_dimension == dimension]
model_list[[dimension]] <- paste(dimension, " =~ ", paste(factor_variables, collapse = " + "), ";")
}
for(dimension in unique(EGAdimensions$EGA_dimension)){
factor_variables <- EGAdimensions$names[EGAdimensions$EGA_dimension == dimension]
if(length(factor_variables) == 2) {
# If there are only two observed variables, fix lambda
model_list[[dimension]] <- paste(dimension, " =~ lambda*", factor_variables[1], "+ lambda*", factor_variables[2], ";")
} else {
model_list[[dimension]] <- paste(dimension, " =~ ", paste(factor_variables, collapse = " + "), ";")
}
}
model_string <- paste(model_list, collapse = " ")
cat(paste(model_list, collapse = "\n"))
EGAdimensions$EGA_dimension %>%
unique() %>%
purrr::map_df(~list( dimension = .x,
alpha = psych::alpha(df[, EGAdimensions$names[EGAdimensions$EGA_dimension == .x]],check.keys = TRUE)$total[["std.alpha"]]
))
# This code is not necessary to run any script.
# It is only used to compute the cronbach alpha of the EGA dimensions.
# load the necessary packages
library(lavaan)
library(readr)  # Data import
library(psych)
print(getwd())
source("../DataPreparation/functions.R")
df <-ImportReversedDF()
EGAdimensions <-read_csv2("../../data/EGAdimensions.csv", show_col_types = FALSE)
# Select the variables
df <- df %>%
select(all_of(EGAdimensions$names))
model_list <- list()
for(dimension in unique(EGAdimensions$EGA_dimension)){
factor_variables <- EGAdimensions$names[EGAdimensions$EGA_dimension == dimension]
model_list[[dimension]] <- paste(dimension, " =~ ", paste(factor_variables, collapse = " + "), ";")
}
for(dimension in unique(EGAdimensions$EGA_dimension)){
factor_variables <- EGAdimensions$names[EGAdimensions$EGA_dimension == dimension]
if(length(factor_variables) == 2) {
# If there are only two observed variables, fix lambda
model_list[[dimension]] <- paste(dimension, " =~ lambda*", factor_variables[1], "+ lambda*", factor_variables[2], ";")
} else {
model_list[[dimension]] <- paste(dimension, " =~ ", paste(factor_variables, collapse = " + "), ";")
}
}
model_string <- paste(model_list, collapse = " ")
cat(paste(model_list, collapse = "\n"))
EGAdimensions$EGA_dimension %>%
unique() %>%
purrr::map_df(~list( dimension = .x,
alpha = psych::alpha(df[, EGAdimensions$names[EGAdimensions$EGA_dimension == .x]],check.keys = TRUE)$total[["std.alpha"]]
))
# Fit the model
fit <- cfa(model_string, data=df, estimator="WLSMV", missing = "pairwise",ordered=FALSE)
summary(fit, fit.measures = TRUE, standardized = T)
# This code is not necessary to run any script.
# It is only used to compute the cronbach alpha of the EGA dimensions.
# load the necessary packages
library(lavaan)
library(readr)  # Data import
library(psych)
print(getwd())
source("../DataPreparation/functions.R")
df <-ImportReversedDF()
EGAdimensions <-read_csv2("../../data/EGAdimensions.csv", show_col_types = FALSE)
# Select the variables
df <- df %>%
select(all_of(EGAdimensions$names))
model_list <- list()
for(dimension in unique(EGAdimensions$EGA_dimension)){
factor_variables <- EGAdimensions$names[EGAdimensions$EGA_dimension == dimension]
model_list[[dimension]] <- paste(dimension, " =~ ", paste(factor_variables, collapse = " + "), ";")
}
for(dimension in unique(EGAdimensions$EGA_dimension)){
factor_variables <- EGAdimensions$names[EGAdimensions$EGA_dimension == dimension]
if(length(factor_variables) == 2) {
# If there are only two observed variables, fix lambda
model_list[[dimension]] <- paste(dimension, " =~ lambda*", factor_variables[1], "+ lambda*", factor_variables[2], ";")
} else {
model_list[[dimension]] <- paste(dimension, " =~ ", paste(factor_variables, collapse = " + "), ";")
}
}
model_string <- paste(model_list, collapse = " ")
cat(paste(model_list, collapse = "\n"))
EGAdimensions$EGA_dimension %>%
unique() %>%
purrr::map_df(~list( dimension = .x,
alpha = psych::alpha(df[, EGAdimensions$names[EGAdimensions$EGA_dimension == .x]],check.keys = TRUE)$total[["std.alpha"]]
))
# Fit the model
fit <- cfa(model_string, data=df, estimator="WLSMV", missing = "pairwise",ordered=TRUE)
summary(fit, fit.measures = TRUE, standardized = T)
