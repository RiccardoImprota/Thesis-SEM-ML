# Tidyverse
library(dplyr)
library(purrr)
library(readr)
library(ggplot2)
library(tidyr)
# Additional libraries used for this analysis
library(sjlabelled)  # Labeling data
library(psych)  # Psychometric analysis and data manipulation
# Load custom functions from external script
source("functions.R")
# Specify the country of interest: Italy (16)
countries <- c(16)
# Define the variables of interest
variablestopredict <- c("eng_energy", "eng_enthusiastic", "eng_timeflies")
# Determine whether to include M1 questions in the analysis (more NAs, but more variables)
consideringM1<-TRUE
# Import the original dataset using a custom function
sourcedf <- ImportOriginalDataset()
# Check the levels and labels of the 'private_sector' variable to see if the data is sound
levels(sourcedf$private_sector)
names(attributes(sourcedf$private_sector)$labels)
# If consideringM1 is FALSE, exclude M1 from selected variables
usedvar <- ImportUsedvar(M1 = consideringM1)
# Select the necessary variables from the dataset, filter for employees, and remove the 'employee_selfdeclared' variable
df <- sourcedf %>%
select(all_of(usedvar$variable)) %>%
filter(employee_selfdeclared == 1) %>%
select(-employee_selfdeclared)
# Update the list of used variables, removing 'employee_selfdeclared' after filtering
usedvar <- usedvar %>% filter(variable != "employee_selfdeclared")
# Check summaries for 'seniority' and 'predict_earnings' variables
summary(df$seniority)
summary(df$predict_earnings)
# Check summaries for work engagement
summary(df$eng_energy)
# Define the values that need to be replaced with NA
values_to_na <- c(-777, -888,-998, -999)
# Replace these values with NA in the dataset, and drop unused levels in factor variables
df <- df %>%
mutate(across(everything(), ~replace(., . %in% values_to_na, NA)))
#%>%  mutate(across(where(is.factor), ~droplevels(.)))
# Check summaries again for 'seniority' and 'predict_earnings' variables
summary(df$seniority)
summary(df$predict_earnings)
# Check summaries for work engagement
summary(df$eng_timeflies)
summary(df$eng_energy)
summary(df$eng_enthusiastic)
# Filter for the specified country (Italy) and ensure all outcome variables have non-NA values
df <- df %>%
filter(Country %in% countries) %>%
filter(across(all_of(variablestopredict), any_vars(!is.na(.))))
# Check summaries again for 'seniority' and 'predict_earnings' variables to compare with previous scripts
summary(df$seniority)
summary(df$predict_earnings)
# Visualize potential outliers with a boxplot
boxplot(df$age, df$seniority, df$usual_hours_week, names = c("age", "seniority", "usual_hours_week"),
main = "Boxplot of selected numerical Variables",
xlab = " ",
ylab = "Value")
# Define a function to remove extreme outliers (those that fall outside a specified number of standard deviations from the mean)
remove_extreme_outliers <- function(df, threshold = 4) {
# Store original number of rows
original_nrow <- nrow(df)
# Iterate over all numeric columns
df <- df %>%
mutate(across(where(is.numeric),
list(outlier = ~ifelse(is.na(.), NA, abs((. - mean(., na.rm = TRUE)) / sd(., na.rm = TRUE)) <= threshold)),
.names = "{.col}_outlier")) %>%
filter(if_all(ends_with("_outlier"), ~is.na(.) | .)) %>%
select(-ends_with("_outlier"))
# Calculate and print number of rows removed
removed_rows <- original_nrow - nrow(df)
print(paste("Removed", removed_rows, "rows"))
return(df)
}
df <- remove_extreme_outliers(df)
# Get the count of NA values for each column in your dataframe
na_count <- df %>% summarise_all(function(x) sum(is.na(x)))
na_count <- na_count %>% pivot_longer(cols = everything(), names_to = "variable", values_to = "value")
# Create histogram
ggplot(na_count, aes(x = value, y = reorder(variable, value))) +
geom_bar(stat = "identity", width = 0.5, fill = "black", alpha=0.7) +
labs(title = "Distribution of Missing Values",
x = "Count of NA", y = "Variable") +
scale_x_continuous(breaks = c(300, 600, 900, 1192), limits = c(0, nrow(df))) +
theme_minimal() +
theme(axis.text.y = element_text(angle = 0, hjust = 1), plot.title = element_text(hjust = 0.5,vjust = 1))
df_numeric <- df %>%
mutate_all(~ as.numeric(as.character(.)))
View(df_numeric)
# Tidyverse
library(dplyr)
library(purrr)
library(readr)
library(ggplot2)
library(tidyr)
# Additional libraries used for this analysis
library(sjlabelled)  # Labeling data
library(psych)  # Psychometric analysis and data manipulation
# Load custom functions from external script
source("functions.R")
# Specify the country of interest: Italy (16)
countries <- c(16)
# Define the variables of interest
variablestopredict <- c("eng_energy", "eng_enthusiastic", "eng_timeflies")
# Determine whether to include M1 questions in the analysis (more NAs, but more variables)
consideringM1<-TRUE
# Tidyverse
library(dplyr)
library(purrr)
library(readr)
library(ggplot2)
library(tidyr)
# Additional libraries used for this analysis
library(sjlabelled)  # Labeling data
library(psych)  # Psychometric analysis and data manipulation
# Load custom functions from external script
source("functions.R")
# Specify the country of interest: Italy (16)
countries <- c(16)
# Define the variables of interest
variablestopredict <- c("eng_energy", "eng_enthusiastic", "eng_timeflies")
# Determine whether to include M1 questions in the analysis (more NAs, but more variables)
consideringM1<-TRUE
# Import the original dataset using a custom function
sourcedf <- ImportOriginalDataset()
# Check the levels and labels of the 'private_sector' variable to see if the data is sound
levels(sourcedf$private_sector)
names(attributes(sourcedf$private_sector)$labels)
sourcedf
sourcedf$eng_energy
summary(sourcedf$eng_energy)
# Tidyverse
library(dplyr)
library(purrr)
library(readr)
library(ggplot2)
library(tidyr)
# Additional libraries used for this analysis
library(sjlabelled)  # Labeling data
library(psych)  # Psychometric analysis and data manipulation
# Load custom functions from external script
source("functions.R")
# Specify the country of interest: Italy (16)
countries <- c(16)
# Define the variables of interest
variablestopredict <- c("eng_energy", "eng_enthusiastic", "eng_timeflies")
# Determine whether to include M1 questions in the analysis (more NAs, but more variables)
consideringM1<-TRUE
# Import the original dataset using a custom function
sourcedf <- ImportOriginalDataset()
# Check the levels and labels of the 'private_sector' variable to see if the data is sound
levels(sourcedf$private_sector)
names(attributes(sourcedf$private_sector)$labels)
# If consideringM1 is FALSE, exclude M1 from selected variables
usedvar <- ImportUsedvar(M1 = consideringM1)
# Select the necessary variables from the dataset, filter for employees, and remove the 'employee_selfdeclared' variable
df <- sourcedf %>%
select(all_of(usedvar$variable)) %>%
filter(employee_selfdeclared == 1) %>%
select(-employee_selfdeclared)
# Update the list of used variables, removing 'employee_selfdeclared' after filtering
usedvar <- usedvar %>% filter(variable != "employee_selfdeclared")
# Check summaries for 'seniority' and 'predict_earnings' variables
summary(df$seniority)
summary(df$predict_earnings)
# Check summaries for work engagement
summary(df$eng_energy)
# Define the values that need to be replaced with NA
values_to_na <- c(-777, -888,-998, -999)
# Replace these values with NA in the dataset, and drop unused levels in factor variables
df <- df %>%
mutate(across(everything(), ~replace(., . %in% values_to_na, NA)))
#%>%  mutate(across(where(is.factor), ~droplevels(.)))
# Check summaries again for 'seniority' and 'predict_earnings' variables
summary(df$seniority)
summary(df$predict_earnings)
# Check summaries for work engagement
summary(df$eng_timeflies)
summary(df$eng_energy)
summary(df$eng_enthusiastic)
# Filter for the specified country (Italy) and ensure all outcome variables have non-NA values
df <- df %>%
filter(Country %in% countries) %>%
filter(across(all_of(variablestopredict), any_vars(!is.na(.))))
# Check summaries again for 'seniority' and 'predict_earnings' variables to compare with previous scripts
summary(df$seniority)
summary(df$predict_earnings)
# Visualize potential outliers with a boxplot
boxplot(df$age, df$seniority, df$usual_hours_week, names = c("age", "seniority", "usual_hours_week"),
main = "Boxplot of selected numerical Variables",
xlab = " ",
ylab = "Value")
# Define a function to remove extreme outliers (those that fall outside a specified number of standard deviations from the mean)
remove_extreme_outliers <- function(df, threshold = 4) {
# Store original number of rows
original_nrow <- nrow(df)
# Iterate over all numeric columns
df <- df %>%
mutate(across(where(is.numeric),
list(outlier = ~ifelse(is.na(.), NA, abs((. - mean(., na.rm = TRUE)) / sd(., na.rm = TRUE)) <= threshold)),
.names = "{.col}_outlier")) %>%
filter(if_all(ends_with("_outlier"), ~is.na(.) | .)) %>%
select(-ends_with("_outlier"))
# Calculate and print number of rows removed
removed_rows <- original_nrow - nrow(df)
print(paste("Removed", removed_rows, "rows"))
return(df)
}
df <- remove_extreme_outliers(df)
# Get the count of NA values for each column in your dataframe
na_count <- df %>% summarise_all(function(x) sum(is.na(x)))
na_count <- na_count %>% pivot_longer(cols = everything(), names_to = "variable", values_to = "value")
# Create histogram
ggplot(na_count, aes(x = value, y = reorder(variable, value))) +
geom_bar(stat = "identity", width = 0.5, fill = "black", alpha=0.7) +
labs(title = "Distribution of Missing Values",
x = "Count of NA", y = "Variable") +
scale_x_continuous(breaks = c(300, 600, 900, 1192), limits = c(0, nrow(df))) +
theme_minimal() +
theme(axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
# Get the count of NA values for each column in your dataframe
na_count <- df %>% summarise_all(function(x) sum(is.na(x)))
na_count <- na_count %>% pivot_longer(cols = everything(), names_to = "variable", values_to = "value")
# Create histogram
ggplot(na_count, aes(x = value, y = reorder(variable, value))) +
geom_bar(stat = "identity", width = 0.5, fill = "black", alpha=0.7) +
labs(x = "Count of NA", y = "Variable") +
scale_x_continuous(breaks = c(300, 600, 900, 1192), limits = c(0, nrow(df))) +
theme_minimal() +
theme(axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
